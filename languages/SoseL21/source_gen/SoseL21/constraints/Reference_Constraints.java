package SoseL21.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class Reference_Constraints extends BaseConstraintsDescriptor {
  public Reference_Constraints() {
    super(CONCEPTS.Reference$Tz);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.statement$dhzt, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_r0uxkx_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            return ListScope.forNamedElements(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.Worksheet$PB, false, false), LINKS.statements$X0jd));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static final SNodePointer breakingNode_r0uxkx_a0a0a0a0a1a0a0a0c = new SNodePointer("r:35000110-3b22-4812-a996-59dd8088ef20(SoseL21.constraints)", "1732687248977069983");

  private static final class CONCEPTS {
    /*package*/ static final SConcept Reference$Tz = MetaAdapterFactory.getConcept(0x34218a42298e4adbL, 0x947448d49415dc43L, 0x180bbddf6e1e9cb5L, "SoseL21.structure.Reference");
    /*package*/ static final SConcept Worksheet$PB = MetaAdapterFactory.getConcept(0x34218a42298e4adbL, 0x947448d49415dc43L, 0x180bbddf6e1e9cddL, "SoseL21.structure.Worksheet");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink statement$dhzt = MetaAdapterFactory.getReferenceLink(0x34218a42298e4adbL, 0x947448d49415dc43L, 0x180bbddf6e1e9cb5L, 0x180bbddf6e203a18L, "statement");
    /*package*/ static final SContainmentLink statements$X0jd = MetaAdapterFactory.getContainmentLink(0x34218a42298e4adbL, 0x947448d49415dc43L, 0x180bbddf6e1e9cddL, 0x180bbddf6e1e9d4dL, "statements");
  }
}
