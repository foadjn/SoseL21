package SoseL21.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Boolean_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new DivExpression_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ElifStatement_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ElseStatement_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new EqualsExpression_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ExpressionStatement_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ForStatement_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new GreaterEqualExp_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new GreaterExpression_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new IfStatement_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Integer_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new LessEqualExp_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new LessExpression_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new MinusExpression_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new MulExpression_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new NotEqualExpression_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new PlusExpression_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Reference_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new SoSeWorksheet_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new StringLiteral_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new VariableDeclaration_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new WhileStatement_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x782cac11e196586eL), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x1c76dea34890e0efL), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc8d2b80L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc8ccb63L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc886fd9L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x58aeb4a19afd5f06L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc8edef7L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc88a616L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc887046L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc8b38bdL), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x782cac11e196585eL), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc88a618L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc886f51L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x1c76dea34890e0edL), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x1c76dea34890e0eeL), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc88a617L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x58aeb4a19afd5f1fL), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x782cac11e1965871L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x782cac11e1965857L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x58aeb4a19afd5f19L), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x58aeb4a19afd5f0aL), MetaIdFactory.conceptId(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x74a09ebffc8e713bL)).seal();
}
