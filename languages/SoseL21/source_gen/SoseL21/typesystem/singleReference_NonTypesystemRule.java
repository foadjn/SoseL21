package SoseL21.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class singleReference_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public singleReference_NonTypesystemRule() {
  }
  public void applyRule(final SNode soSeWorksheet, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Iterable<SNode> referencs = SLinkOperations.collect(SNodeOperations.ofConcept(SLinkOperations.getChildren(soSeWorksheet, LINKS.contents$adPM), CONCEPTS.Reference$Y7), LINKS.expression$Fe6m);
    if (Sequence.fromIterable(referencs).distinct().count() != Sequence.fromIterable(referencs).count()) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(soSeWorksheet, "Each Variable can only be referenced once", "r:5d1746ce-af6e-4de2-91d4-aa0b225fc929(SoseL21.typesystem)", "7133992253328063425", null, errorTarget);
      }

    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.SoSeWorksheet$tb;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink contents$adPM = MetaAdapterFactory.getContainmentLink(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x782cac11e1965857L, 0x782cac11e1965872L, "contents");
    /*package*/ static final SReferenceLink expression$Fe6m = MetaAdapterFactory.getReferenceLink(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x782cac11e1965871L, 0x1cdc86ac58a14b87L, "expression");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Reference$Y7 = MetaAdapterFactory.getConcept(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x782cac11e1965871L, "SoseL21.structure.Reference");
    /*package*/ static final SConcept SoSeWorksheet$tb = MetaAdapterFactory.getConcept(0xf54c6703341840bcL, 0xbe9312879578d6a1L, 0x782cac11e1965857L, "SoseL21.structure.SoSeWorksheet");
  }
}
