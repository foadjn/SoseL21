package SoseL21.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_Worksheet_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Worksheet_NonTypesystemRule() {
  }
  public void applyRule(final SNode worksheet, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Iterable<SNode> statements = SLinkOperations.collect(SNodeOperations.ofConcept(SLinkOperations.getChildren(worksheet, LINKS.statements$X0jd), CONCEPTS.Reference$Tz), LINKS.statement$dhzt);

    if (Sequence.fromIterable(statements).count() != Sequence.fromIterable(statements).distinct().count()) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(worksheet, "Only one reference to a variable is allowed ", "r:64559bdd-1600-4033-8d06-23f6fbda34ed(SoseL21.typesystem)", "1732687248977241124", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Worksheet$PB;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink statements$X0jd = MetaAdapterFactory.getContainmentLink(0x34218a42298e4adbL, 0x947448d49415dc43L, 0x180bbddf6e1e9cddL, 0x180bbddf6e1e9d4dL, "statements");
    /*package*/ static final SReferenceLink statement$dhzt = MetaAdapterFactory.getReferenceLink(0x34218a42298e4adbL, 0x947448d49415dc43L, 0x180bbddf6e1e9cb5L, 0x180bbddf6e203a18L, "statement");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Reference$Tz = MetaAdapterFactory.getConcept(0x34218a42298e4adbL, 0x947448d49415dc43L, 0x180bbddf6e1e9cb5L, "SoseL21.structure.Reference");
    /*package*/ static final SConcept Worksheet$PB = MetaAdapterFactory.getConcept(0x34218a42298e4adbL, 0x947448d49415dc43L, 0x180bbddf6e1e9cddL, "SoseL21.structure.Worksheet");
  }
}
